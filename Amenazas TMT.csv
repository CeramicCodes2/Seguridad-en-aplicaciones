Id,Title,Category,Diagram,Interaction,Priority,State,Changed By,Description,Justification,Last Modified
72,Data Store Inaccessible,Denial Of Service,Diagram 1,HTTPS,High,Not Started,,An external agent prevents access to a data store on the other side of the trust boundary.,,Generated
1,Data Flow HTTPS Is Potentially Interrupted,Denial Of Service,Diagram 1,HTTPS,High,Not Started,,An external agent interrupts data flowing across a trust boundary in either direction.,,Generated
2,Spoofing of Source Data Store Load balancer,Spoofing,Diagram 1,HTTPS,High,Not Started,,Load balancer may be spoofed by an attacker and this may lead to incorrect data delivered to Web Application. Consider using a standard authentication mechanism to identify the source data store.,,Generated
3,Weak Access Control for a Resource,Information Disclosure,Diagram 1,HTTPS,High,Not Started,,Improper data protection of Load balancer can allow an attacker to read information not intended for disclosure. Review authorization settings.,,Generated
4,Web Application Process Memory Tampered,Tampering,Diagram 1,HTTPS,High,Not Started,,"If Web Application is given access to memory, such as shared memory or pointers, or is given the ability to control what Security Server executes (for example, passing back a function pointer.), then Web Application can tamper with Security Server. Consider if the function could work with less access to memory, such as passing data rather than pointers. Copy in data provided, and then validate it.",,Generated
5,Replay Attacks,Tampering,Diagram 1,HTTPS,High,Not Started,,Packets or messages without sequence numbers or timestamps can be captured and replayed in a wide variety of ways. Implement or utilize an existing communication protocol that supports anti-replay techniques (investigate sequence numbers before timers) and strong integrity.,,Generated
6,Collision Attacks,Tampering,Diagram 1,HTTPS,High,Not Started,,"Attackers who can send a series of packets or messages may be able to overlap data. For example, packet 1 may be 100 bytes starting at offset 0. Packet 2 may be 100 bytes starting at offset 25. Packet 2 will overwrite 75 bytes of packet 1. Ensure you reassemble data before filtering it, and ensure you explicitly handle these sorts of cases.",,Generated
7,Weak Authentication Scheme,Information Disclosure,Diagram 1,HTTPS,High,Not Started,,"Custom authentication schemes are susceptible to common weaknesses such as weak credential change management, credential equivalence, easily guessable credentials, null credentials, downgrade authentication or a weak credential change management system. Consider the impact and potential mitigations for your custom authentication scheme.",,Generated
8,Elevation Using Impersonation,Elevation Of Privilege,Diagram 1,HTTPS,High,Not Started,,Security Server may be able to impersonate the context of Web Application in order to gain additional privilege.,,Generated
9,Visualization server Process Memory Tampered,Tampering,Diagram 1,HTTPS,High,Not Started,,"If Visualization server is given access to memory, such as shared memory or pointers, or is given the ability to control what Web Application executes (for example, passing back a function pointer.), then Visualization server can tamper with Web Application. Consider if the function could work with less access to memory, such as passing data rather than pointers. Copy in data provided, and then validate it.",,Generated
10,Replay Attacks,Tampering,Diagram 1,HTTPS,High,Not Started,,Packets or messages without sequence numbers or timestamps can be captured and replayed in a wide variety of ways. Implement or utilize an existing communication protocol that supports anti-replay techniques (investigate sequence numbers before timers) and strong integrity.,,Generated
11,Collision Attacks,Tampering,Diagram 1,HTTPS,High,Not Started,,"Attackers who can send a series of packets or messages may be able to overlap data. For example, packet 1 may be 100 bytes starting at offset 0. Packet 2 may be 100 bytes starting at offset 25. Packet 2 will overwrite 75 bytes of packet 1. Ensure you reassemble data before filtering it, and ensure you explicitly handle these sorts of cases.",,Generated
12,Weak Authentication Scheme,Information Disclosure,Diagram 1,HTTPS,High,Not Started,,"Custom authentication schemes are susceptible to common weaknesses such as weak credential change management, credential equivalence, easily guessable credentials, null credentials, downgrade authentication or a weak credential change management system. Consider the impact and potential mitigations for your custom authentication scheme.",,Generated
13,Elevation Using Impersonation,Elevation Of Privilege,Diagram 1,HTTPS,High,Not Started,,Web Application may be able to impersonate the context of Visualization server in order to gain additional privilege.,,Generated
14,Web Application Process Memory Tampered,Tampering,Diagram 1,HTTPS,High,Not Started,,"If Web Application is given access to memory, such as shared memory or pointers, or is given the ability to control what Visualization server executes (for example, passing back a function pointer.), then Web Application can tamper with Visualization server. Consider if the function could work with less access to memory, such as passing data rather than pointers. Copy in data provided, and then validate it.",,Generated
15,Replay Attacks,Tampering,Diagram 1,HTTPS,High,Not Started,,Packets or messages without sequence numbers or timestamps can be captured and replayed in a wide variety of ways. Implement or utilize an existing communication protocol that supports anti-replay techniques (investigate sequence numbers before timers) and strong integrity.,,Generated
16,Collision Attacks,Tampering,Diagram 1,HTTPS,High,Not Started,,"Attackers who can send a series of packets or messages may be able to overlap data. For example, packet 1 may be 100 bytes starting at offset 0. Packet 2 may be 100 bytes starting at offset 25. Packet 2 will overwrite 75 bytes of packet 1. Ensure you reassemble data before filtering it, and ensure you explicitly handle these sorts of cases.",,Generated
17,Weak Authentication Scheme,Information Disclosure,Diagram 1,HTTPS,High,Not Started,,"Custom authentication schemes are susceptible to common weaknesses such as weak credential change management, credential equivalence, easily guessable credentials, null credentials, downgrade authentication or a weak credential change management system. Consider the impact and potential mitigations for your custom authentication scheme.",,Generated
18,Elevation Using Impersonation,Elevation Of Privilege,Diagram 1,HTTPS,High,Not Started,,Visualization server may be able to impersonate the context of Web Application in order to gain additional privilege.,,Generated
19,JavaScript Object Notation Processing,Tampering,Diagram 1,HTTPS,High,Not Started,,"If a dataflow contains JSON, JSON processing and hijacking threats may be exploited.",,Generated
20,Elevation Using Impersonation,Elevation Of Privilege,Diagram 1,HTTPS,High,Not Started,,Visualization server may be able to impersonate the context of manager in order to gain additional privilege.,,Generated
21,JavaScript Object Notation Processing,Tampering,Diagram 1,HTTPS,High,Not Started,,"If a dataflow contains JSON, JSON processing and hijacking threats may be exploited.",,Generated
22,Potential Data Repudiation by Web Application,Repudiation,Diagram 1,HTTPS,High,Not Started,,"Web Application claims that it did not receive data from a source outside the trust boundary. Consider using logging or auditing to record the source, time, and summary of the received data.",,Generated
23,Weak Access Control for a Resource,Information Disclosure,Diagram 1,HTTPS,High,Not Started,,Improper data protection of Load balancer can allow an attacker to read information not intended for disclosure. Review authorization settings.,,Generated
24,Potential Process Crash or Stop for Web Application,Denial Of Service,Diagram 1,HTTPS,High,Not Started,,"Web Application crashes, halts, stops or runs slowly; in all cases violating an availability metric.",,Generated
25,Data Flow HTTPS Is Potentially Interrupted,Denial Of Service,Diagram 1,HTTPS,High,Not Started,,An external agent interrupts data flowing across a trust boundary in either direction.,,Generated
26,Data Store Inaccessible,Denial Of Service,Diagram 1,HTTPS,High,Not Started,,An external agent prevents access to a data store on the other side of the trust boundary.,,Generated
27,Web Application May be Subject to Elevation of Privilege Using Remote Code Execution,Elevation Of Privilege,Diagram 1,HTTPS,High,Not Started,,Load balancer may be able to remotely execute code for Web Application.,,Generated
28,Elevation by Changing the Execution Flow in Web Application,Elevation Of Privilege,Diagram 1,HTTPS,High,Not Started,,An attacker may pass data into Web Application in order to change the flow of program execution within Web Application to the attacker's choosing.,,Generated
29,Spoofing of Source Data Store SQL Repository,Spoofing,Diagram 1,HTTPS,High,Not Started,,SQL Repository may be spoofed by an attacker and this may lead to incorrect data delivered to Security Server. Consider using a standard authentication mechanism to identify the source data store.,,Generated
30,Data Store Inaccessible,Denial Of Service,Diagram 1,HTTPS,High,Not Started,,An external agent prevents access to a data store on the other side of the trust boundary.,,Generated
31,Data Flow HTTPS Is Potentially Interrupted,Denial Of Service,Diagram 1,HTTPS,High,Not Started,,An external agent interrupts data flowing across a trust boundary in either direction.,,Generated
32,Potential Excessive Resource Consumption for Web Application or Load balancer,Denial Of Service,Diagram 1,HTTPS,High,Not Started,,"Does Web Application or Load balancer take explicit steps to control resource consumption? Resource consumption attacks can be hard to deal with, and there are times that it makes sense to let the OS do the job. Be careful that your resource requests don't deadlock, and that they do timeout.",,Generated
33,Authorization Bypass,Information Disclosure,Diagram 1,HTTPS,High,Not Started,,"Can you access Load balancer and bypass the permissions for the object? For example by editing the files directly with a hex editor, or reaching it via filesharing? Ensure that your program is the only one that can access the data, and that all other subjects have to use your interface.",,Generated
34,Data Store Denies Load balancer Potentially Writing Data,Repudiation,Diagram 1,HTTPS,High,Not Started,,"Load balancer claims that it did not write data received from an entity on the other side of the trust boundary. Consider using logging or auditing to record the source, time, and summary of the received data.",,Generated
35,The Load balancer Data Store Could Be Corrupted,Tampering,Diagram 1,HTTPS,High,Not Started,,Data flowing across HTTPS may be tampered with by an attacker. This may lead to corruption of Load balancer. Ensure the integrity of the data flow to the data store.,,Generated
36,Spoofing of Destination Data Store Load balancer,Spoofing,Diagram 1,HTTPS,High,Not Started,,Load balancer may be spoofed by an attacker and this may lead to data being written to the attacker's target instead of Load balancer. Consider using a standard authentication mechanism to identify the destination data store.,,Generated
37,Weak Access Control for a Resource,Information Disclosure,Diagram 1,HTTPS,High,Not Started,,Improper data protection of SQL Repository can allow an attacker to read information not intended for disclosure. Review authorization settings.,,Generated
38,Spoofing of Destination Data Store SQL Repository,Spoofing,Diagram 1,HTTPS,High,Not Started,,SQL Repository may be spoofed by an attacker and this may lead to data being written to the attacker's target instead of SQL Repository. Consider using a standard authentication mechanism to identify the destination data store.,,Generated
39,Potential SQL Injection Vulnerability for SQL Repository,Tampering,Diagram 1,HTTPS,High,Not Started,,SQL injection is an attack in which malicious code is inserted into strings that are later passed to an instance of SQL Server for parsing and execution. Any procedure that constructs SQL statements should be reviewed for injection vulnerabilities because SQL Server will execute all syntactically valid queries that it receives. Even parameterized data can be manipulated by a skilled and determined attacker.,,Generated
40,Authorization Bypass,Information Disclosure,Diagram 1,HTTPS,High,Not Started,,"Can you access SQL Repository and bypass the permissions for the object? For example by editing the files directly with a hex editor, or reaching it via filesharing? Ensure that your program is the only one that can access the data, and that all other subjects have to use your interface.",,Generated
41,Weak Credential Storage,Information Disclosure,Diagram 1,HTTPS,High,Not Started,,"Credentials held at the server are often disclosed or tampered with and credentials stored on the client are often stolen. For server side, consider storing a salted hash of the credentials instead of storing the credentials themselves. If this is not possible due to business requirements, be sure to encrypt the credentials before storage, using an SDL-approved mechanism. For client side, if storing credentials is required, encrypt them and protect the data store in which they're stored",,Generated
42,Potential Excessive Resource Consumption for Security Server or SQL Repository,Denial Of Service,Diagram 1,HTTPS,High,Not Started,,"Does Security Server or SQL Repository take explicit steps to control resource consumption? Resource consumption attacks can be hard to deal with, and there are times that it makes sense to let the OS do the job. Be careful that your resource requests don't deadlock, and that they do timeout.",,Generated
43,Spoofing of Source Data Store SQL Repository,Spoofing,Diagram 1,HTTPS,High,Not Started,,SQL Repository may be spoofed by an attacker and this may lead to incorrect data delivered to Web Application. Consider using a standard authentication mechanism to identify the source data store.,,Generated
44,Weak Access Control for a Resource,Information Disclosure,Diagram 1,HTTPS,High,Not Started,,Improper data protection of SQL Repository can allow an attacker to read information not intended for disclosure. Review authorization settings.,,Generated
45,Spoofing of Destination Data Store SQL Repository,Spoofing,Diagram 1,HTTPS,High,Not Started,,SQL Repository may be spoofed by an attacker and this may lead to data being written to the attacker's target instead of SQL Repository. Consider using a standard authentication mechanism to identify the destination data store.,,Generated
46,Potential SQL Injection Vulnerability for SQL Repository,Tampering,Diagram 1,HTTPS,High,Not Started,,SQL injection is an attack in which malicious code is inserted into strings that are later passed to an instance of SQL Server for parsing and execution. Any procedure that constructs SQL statements should be reviewed for injection vulnerabilities because SQL Server will execute all syntactically valid queries that it receives. Even parameterized data can be manipulated by a skilled and determined attacker.,,Generated
47,Authorization Bypass,Information Disclosure,Diagram 1,HTTPS,High,Not Started,,"Can you access SQL Repository and bypass the permissions for the object? For example by editing the files directly with a hex editor, or reaching it via filesharing? Ensure that your program is the only one that can access the data, and that all other subjects have to use your interface.",,Generated
48,Weak Credential Storage,Information Disclosure,Diagram 1,HTTPS,High,Not Started,,"Credentials held at the server are often disclosed or tampered with and credentials stored on the client are often stolen. For server side, consider storing a salted hash of the credentials instead of storing the credentials themselves. If this is not possible due to business requirements, be sure to encrypt the credentials before storage, using an SDL-approved mechanism. For client side, if storing credentials is required, encrypt them and protect the data store in which they're stored",,Generated
49,Potential Excessive Resource Consumption for Web Application or SQL Repository,Denial Of Service,Diagram 1,HTTPS,High,Not Started,,"Does Web Application or SQL Repository take explicit steps to control resource consumption? Resource consumption attacks can be hard to deal with, and there are times that it makes sense to let the OS do the job. Be careful that your resource requests don't deadlock, and that they do timeout.",,Generated
50,Spoofing the Authorization Provider External Entity,Spoofing,Diagram 1,HTTPS,High,Not Started,,Authorization Provider may be spoofed by an attacker and this may lead to unauthorized access to Visualization server. Consider using a standard authentication mechanism to identify the external entity.,,Generated
51,Elevation Using Impersonation,Elevation Of Privilege,Diagram 1,HTTPS,High,Not Started,,Visualization server may be able to impersonate the context of Authorization Provider in order to gain additional privilege.,,Generated
52,JavaScript Object Notation Processing,Tampering,Diagram 1,HTTPS,High,Not Started,,"If a dataflow contains JSON, JSON processing and hijacking threats may be exploited.",,Generated
53,JavaScript Object Notation Processing,Tampering,Diagram 1,HTTPS,High,Not Started,,"If a dataflow contains JSON, JSON processing and hijacking threats may be exploited.",,Generated
54,JavaScript Object Notation Processing,Tampering,Diagram 1,HTTPS,High,Not Started,,"If a dataflow contains JSON, JSON processing and hijacking threats may be exploited.",,Generated
55,JavaScript Object Notation Processing,Tampering,Diagram 1,HTTPS,High,Not Started,,"If a dataflow contains JSON, JSON processing and hijacking threats may be exploited.",,Generated
56,"Spoofing of Destination Data Store Monitoring Server ",Spoofing,Diagram 1,Binary,High,Not Started,,Monitoring Server  may be spoofed by an attacker and this may lead to data being written to the attacker's target instead of Monitoring Server . Consider using a standard authentication mechanism to identify the destination data store.,,Generated
57,Risks from Logging,Tampering,Diagram 1,Binary,High,Not Started,,"Log readers can come under attack via log files. Consider ways to canonicalize data in all logs. Implement a single reader for the logs, if possible, in order to reduce attack surface area. Be sure to understand and document log file elements which come from untrusted sources.",,Generated
58,Lower Trusted Subject Updates Logs,Repudiation,Diagram 1,Binary,High,Not Started,,"If you have trust levels, is anyone other outside of the highest trust level allowed to log? Letting everyone write to your logs can lead to repudiation problems. Only allow trusted code to log.",,Generated
59,Data Logs from an Unknown Source,Repudiation,Diagram 1,Binary,High,Not Started,,Do you accept logs from unknown or weakly authenticated users or systems? Identify and authenticate the source of the logs before accepting them.,,Generated
60,Insufficient Auditing,Repudiation,Diagram 1,Binary,High,Not Started,,Does the log capture enough data to understand what happened in the past? Do your logs capture enough data to understand an incident after the fact? Is such capture lightweight enough to be left on all the time? Do you have enough data to deal with repudiation claims? Make sure you log sufficient and appropriate data to handle a repudiation claims. You might want to talk to an audit expert as well as a privacy expert about your choice of data.,,Generated
61,Potential Weak Protections for Audit Data,Repudiation,Diagram 1,Binary,High,Not Started,,"Consider what happens when the audit mechanism comes under attack, including attempts to destroy the logs, or attack log analysis programs. Ensure access to the log is through a reference monitor, which controls read and write separately. Document what filters, if any, readers can rely on, or writers should expect",,Generated
62,Authorization Bypass,Information Disclosure,Diagram 1,Binary,High,Not Started,,"Can you access Monitoring Server  and bypass the permissions for the object? For example by editing the files directly with a hex editor, or reaching it via filesharing? Ensure that your program is the only one that can access the data, and that all other subjects have to use your interface.",,Generated
63,"Potential Excessive Resource Consumption for Security Server or Monitoring Server ",Denial Of Service,Diagram 1,Binary,High,Not Started,,"Does Security Server or Monitoring Server  take explicit steps to control resource consumption? Resource consumption attacks can be hard to deal with, and there are times that it makes sense to let the OS do the job. Be careful that your resource requests don't deadlock, and that they do timeout.",,Generated
64,Elevation Using Impersonation,Elevation Of Privilege,Diagram 1,HTTPS,High,Not Started,,Visualization server may be able to impersonate the context of Event Administrator in order to gain additional privilege.,,Generated
65,External Entity Client Potentially Denies Receiving Data,Repudiation,Diagram 1,HTTPS,High,Not Started,,"Client claims that it did not receive data from a process on the other side of the trust boundary. Consider using logging or auditing to record the source, time, and summary of the received data.",,Generated
66,Spoofing of Source Data Store Load balancer,Spoofing,Diagram 1,HTTPS,High,Not Started,,Load balancer may be spoofed by an attacker and this may lead to incorrect data delivered to Client. Consider using a standard authentication mechanism to identify the source data store.,,Generated
67,Data Store Inaccessible,Denial Of Service,Diagram 1,HTTPS,High,Not Started,,An external agent prevents access to a data store on the other side of the trust boundary.,,Generated
68,Data Flow HTTPS Is Potentially Interrupted,Denial Of Service,Diagram 1,HTTPS,High,Not Started,,An external agent interrupts data flowing across a trust boundary in either direction.,,Generated
69,Data Store Denies Load balancer Potentially Writing Data,Repudiation,Diagram 1,HTTPS,High,Not Started,,"Load balancer claims that it did not write data received from an entity on the other side of the trust boundary. Consider using logging or auditing to record the source, time, and summary of the received data.",,Generated
70,The Load balancer Data Store Could Be Corrupted,Tampering,Diagram 1,HTTPS,High,Not Started,,Data flowing across HTTPS may be tampered with by an attacker. This may lead to corruption of Load balancer. Ensure the integrity of the data flow to the data store.,,Generated
71,Spoofing of Destination Data Store Load balancer,Spoofing,Diagram 1,HTTPS,High,Not Started,,Load balancer may be spoofed by an attacker and this may lead to data being written to the attacker's target instead of Load balancer. Consider using a standard authentication mechanism to identify the destination data store.,,Generated
